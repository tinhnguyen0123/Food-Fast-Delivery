import RestaurantRepository from "../repositories/restaurant.repositories.js";
import cloudinary from "../utils/cloudinary.js";

class RestaurantService {
  // ğŸŸ¢ Táº¡o nhÃ  hÃ ng má»›i
  async createRestaurant(data, file) {
    if (!data.name || !data.ownerId) {
      throw new Error("TÃªn nhÃ  hÃ ng vÃ  ID chá»§ sá»Ÿ há»¯u lÃ  báº¯t buá»™c");
    }

    // Náº¿u cÃ³ file áº£nh thÃ¬ upload lÃªn Cloudinary
    if (file) {
      const result = await cloudinary.uploader.upload(file.path, {
        folder: "restaurants",
      });
      data.imageUrl = result.secure_url;
    }

    const restaurant = await RestaurantRepository.createRestaurant(data);
    return restaurant;
  }

  // ğŸŸ¢ Láº¥y nhÃ  hÃ ng theo ID
  async getRestaurantById(restaurantId) {
    const restaurant = await RestaurantRepository.getRestaurantById(restaurantId);
    if (!restaurant) {
      throw new Error("KhÃ´ng tÃ¬m tháº¥y nhÃ  hÃ ng");
    }
    return restaurant;
  }

  // ğŸŸ¢ Láº¥y táº¥t cáº£ nhÃ  hÃ ng
  async getAllRestaurants() {
    return await RestaurantRepository.getAllRestaurants();
  }

  // ğŸŸ¢ Láº¥y nhÃ  hÃ ng theo chá»§ sá»Ÿ há»¯u
  async getRestaurantsByOwner(ownerId) {
    return await RestaurantRepository.getRestaurantsByOwner(ownerId);
  }

  // ğŸŸ¢ Cáº­p nháº­t thÃ´ng tin nhÃ  hÃ ng (cÃ³ thá»ƒ thay áº£nh)
  async updateRestaurant(restaurantId, data, file) {
    if (file) {
      const result = await cloudinary.uploader.upload(file.path, {
        folder: "restaurants",
      });
      data.imageUrl = result.secure_url;
    }

    const updated = await RestaurantRepository.updateRestaurant(restaurantId, data);
    if (!updated) {
      throw new Error("Cáº­p nháº­t tháº¥t báº¡i hoáº·c nhÃ  hÃ ng khÃ´ng tá»“n táº¡i");
    }
    return updated;
  }

  // ğŸŸ¢ XÃ³a nhÃ  hÃ ng
  async deleteRestaurant(restaurantId) {
    const deleted = await RestaurantRepository.deleteRestaurant(restaurantId);
    if (!deleted) {
      throw new Error("KhÃ´ng thá»ƒ xÃ³a, nhÃ  hÃ ng khÃ´ng tá»“n táº¡i");
    }
    return deleted;
  }
}

export default new RestaurantService();
